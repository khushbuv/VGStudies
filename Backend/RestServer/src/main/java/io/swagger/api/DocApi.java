/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-24T13:17:11.534Z")

@Api(value = "doc", description = "the doc API")
public interface DocApi {

    @ApiOperation(value = "download file", nickname = "downloadFile", notes = "", response = Resource.class, tags={ "Docs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Resource.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "user is unauthorised to make this request"),
        @ApiResponse(code = 404, message = "not found"),
        @ApiResponse(code = 408, message = "Request timeout"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/doc/download/{docId}",
    		produces = {"image/jpeg","application/pdf","image/png", "image/gif" ,"text/html","application/vnd.ms-excel", "application/zip"
    				,"application/gzip", "text/plain"},
        method = RequestMethod.GET)
    ResponseEntity<Resource> downloadFile(@ApiParam(value = "document Id",required=true) @PathVariable("docId") Long docId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userId", required = true) Long userId);


    @ApiOperation(value = "Add a new pet to the store", nickname = "updateDoc", notes = "", tags={ "Docs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "user is unauthorised to make this request"),
        @ApiResponse(code = 404, message = "not found"),
        @ApiResponse(code = 408, message = "Request timeout"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/doc/update/{docId}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateDoc(@ApiParam(value = "",required=true) @PathVariable("docId") Long docId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userId", required = true) Long userId,@ApiParam(value = "doc name.", required=true) @RequestParam(value="DocName", required=true)  String docName,@ApiParam(value = "", required=true) @RequestParam(value="docname", required=true)  String docname,@ApiParam(value = "") @RequestParam(value="category", required=false)  String category,@ApiParam(value = "") @RequestParam(value="tags", required=false)  String tags);


    @ApiOperation(value = "Add a new pet to the store", nickname = "uploadDoc", notes = "", tags={ "Docs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "user is unauthorised to make this request"),
        @ApiResponse(code = 404, message = "not found"),
        @ApiResponse(code = 408, message = "Request timeout"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/doc/upload/{userId}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<Void> uploadDoc(@ApiParam(value = "",required=true) @PathVariable("userId") Long userId,@ApiParam(value = "doc name.", required=true) @RequestParam(value="DocName", required=true)  String docName,@ApiParam(value = "", required=true) @RequestParam(value="docname", required=true)  String docname,@ApiParam(value = "") @RequestParam(value="category", required=false)  String category,@ApiParam(value = "") @RequestParam(value="tags", required=false)  String tags);

}
